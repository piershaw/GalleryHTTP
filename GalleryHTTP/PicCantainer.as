package {		import flash.display.MovieClip;	import fl.controls.ProgressBar;	import fl.controls.ProgressBarMode;	import fl.containers.UILoader;	import flash.events.*;	import flash.net.*;	import fl.data.DataProvider;	import flash.utils.*;	import flash.ui.*;			import gs.*;	import gs.easing.*;	import gs.events.*;	import gs.plugins.*;		public class PicCantainer extends MovieClip {				public var path:String;		public var imageName:String;		public var fullPath:String;		public var reqGetPath:String;		public var reqGet:URLRequest;		public var loaderGet:URLLoader;		public var varsSet:URLVariables;		public var varsGet:URLVariables;		public var pageFormat:String;						public var sel:Number;		public var parentNumber:Number;		public var lastNum:Number;		public var lastNumber:Boolean;		public var forward:Boolean;		public var backward:Boolean;		public var myTimer:Timer;		public var myTimer2:Timer;				public var directory:Array;// to switch folders		//public var menuCantainer:MenuCantainer;				public var picloader:PicturesLoader;				public function PicCantainer() {						picloader = new PicturesLoader();									sel = 0;			lastNum = 0;			lastNumber = false;			directory = new Array();			varsSet = new URLVariables(); //post			varsGet= new URLVariables(); //post			pageFormat = URLLoaderDataFormat.TEXT; //change to new way			loaderGet = new URLLoader();//get results						reqGetPath = "http://localhost/GalleryHTTP/getPhotos.php";			//reqGetPath2 = "http://localhost/GalleryHTTP/getPhotos2.php";			reqGet = new URLRequest(reqGetPath);						myTimer = new Timer(100,1);			myTimer2 = new Timer(100,50);						path = "http://localhost/GalleryHTTP/";						imageViwer.load();			imageViwer.addEventListener(ProgressEvent.PROGRESS, progressHandler);			imageViwer.addEventListener(Event.COMPLETE, completeHandler);						var urlLoader:URLLoader = new URLLoader();			urlLoader.addEventListener(IOErrorEvent.IO_ERROR, ioerrorHandler);						startPlayerStuff(reqGetPath);						right.addEventListener(MouseEvent.MOUSE_OVER,moveRightOver);			left.addEventListener(MouseEvent.MOUSE_OVER,moveLeftOver);			right.addEventListener(MouseEvent.MOUSE_DOWN,moveRight);			left.addEventListener(MouseEvent.MOUSE_DOWN,moveLeft);						//this.addEventListener(Event.ENTER_FRAME,update);		}//for progress bar		public function progressHandler(event:ProgressEvent):void {			var uiLdr:UILoader = event.currentTarget as UILoader;			var kbLoaded:String = Number(uiLdr.bytesLoaded / 1024).toFixed(1);			var kbTotal:String = Number(uiLdr.bytesTotal / 1024).toFixed(1);			myLabel.text = kbLoaded + " of " + kbTotal + " KB" + " (" + Math.round(uiLdr.percentLoaded) + "%)";			bar.setProgress(event.bytesLoaded, event.bytesTotal);		}		public function completeHandler(event:Event):void {			myLabel.visible = false;			bar.visible = false;			imageViwer.removeEventListener(ProgressEvent.PROGRESS, progressHandler);			imageViwer.removeEventListener(Event.COMPLETE, completeHandler);		}		public function ioerrorHandler(event:Event):void {			trace(event.target);		}//GET Data		private function startPlayerStuff(dir):void{			loaderGet.addEventListener(Event.COMPLETE, startStuff);			//loaderGet.addEventListener(IOErrorEvent.IO_ERROR, loadPageError);			loaderGet.dataFormat = URLLoaderDataFormat.TEXT;			varsGet = new URLVariables(loaderGet.data);									varsGet.dir = dir;						reqGet.method = URLRequestMethod.POST;						reqGet.data = varsGet;						loaderGet.load(reqGet);		}						private function startStuff(event:Event):void{			loaderGet.removeEventListener(Event.COMPLETE, startStuff);			//trace(reqGetShirts.data);			//trace(event.target.data);			var theContent:String = event.target.data.toString();			var contentArray:Array = theContent.split("%");									for each (var prop in contentArray){				directory.push(prop);				lastNum = contentArray.length -1;				trace("lastNum " + lastNum);			}					//pics			for(var i = 0; i < directory.length; i++){				trace("directory " + directory[i]);				imageViwer.alpha = 0;				imageViwer.visible = false;				//trace();			}												if(directory[i] == undefined){					lastNum--;					trace("take out " + directory[i]);					trace("lastNum " + lastNum);				}else if( directory[i] == ""){					lastNum--;					trace("take out " + directory[i]);					trace("lastNum " + lastNum);				}												if(sel == 0){				display(sel);				}							myTimer2.start();			myTimer.addEventListener(TimerEvent.TIMER, timerHandler);			myTimer2.addEventListener(TimerEvent.TIMER, timerHandler2);		}														public function moveRightOver(event:MouseEvent):void{			left.alpha = 0.0;			//right.alpha = 0.5;			MenuCantainer.updateRight(true);			MenuCantainer.updateLeft(false);		}				public function moveLeftOver(event:MouseEvent):void{			//left.alpha = 0.5; // debug			right.alpha = 0.0;			MenuCantainer.updateRight(false);			MenuCantainer.updateLeft(true);		}				public function moveRight(event:MouseEvent):void{						imageViwer.alpha = 0;			imageViwer.visible = false;						if(sel == lastNum){				trace("sel lastNum Right >>>" + sel);				forward = true;				sel = 0;				display(0);								trace("sel Right >>>" + sel);			}else if(backward){				backward = false;				sel += 1;				trace("backward" + sel);				display(sel);			}else{				trace("sel going Right >>>" + sel);				sel += 1;				forward = true;				display(sel);				trace("sel >>>" + sel);			}					}						public function moveLeft(event:MouseEvent):void{						imageViwer.alpha = 0;			imageViwer.visible = false;						if(sel == 0){				sel = lastNum;				display(sel);				trace("sel at 0 <<<" + sel);			}else if(forward){				forward = false				sel -= 1;				trace("forward  <<<" + sel);				display(sel);			}else{				sel -= 1;				trace("sel Left going back <<<" + sel);				backward = true;				display(sel);							}					}						private function timerHandler(e:TimerEvent):void{			//trace("time.currentCount" + myTimer.currentCount);			imageViwer.alpha = 0;			imageViwer.visible = false;           if(myTimer.currentCount == 1){				//trace("go");				myTimer.reset();				myTimer.stop();				imageViwer.visible = true;				TweenLite.to(imageViwer, 2.0, {alpha:1});			}        }						private function timerHandler2(e:TimerEvent):void{			trace("time.currentCount " + myTimer2.currentCount);						           if(myTimer2.currentCount == 50){				trace("go ");				imageViwer.alpha = 0;				imageViwer.visible = false;				myTimer2.reset();				myTimer2.start();			if(sel == lastNum){				imageViwer.alpha = 0;				imageViwer.visible = false;				sel = 0;				display2(sel);				trace("sel at 0 <<<" + sel);			}else{				imageViwer.alpha = 0;				imageViwer.visible = false;				sel++;				trace("sel at " + sel);				display2(sel);			}			}        }     	private function display(n:Number):void{			myTimer.start();			imageName = directory[n];			fullPath = path+imageName;			imageViwer.source = fullPath;		}				private function display2(n:Number):void{			myTimer.start();			imageName = directory[n];			fullPath = path+imageName;			imageViwer.source = fullPath;		}											}	}